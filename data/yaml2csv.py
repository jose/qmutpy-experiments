#!/usr/bin/env python
#
# ------------------------------------------------------------------------------
# This script converts a YAML file generated by [MutPy](https://github.com/mutpy/mutpy)
# into a CSV file.
#
# Usage:
# yaml2csv.py <yaml file path> <csv file path>
#
# Requirements:
#   - Python >= 3.6.8
#   - PyYAML >= 5.4.1
# ------------------------------------------------------------------------------

import os
import sys
import csv
import yaml
import subprocess

if sys.version_info < (3, 6, 8):
    print('The yaml2csv.py script requires Python >= 3.6.8!')
    exit(1)

yaml.version = [int(x) for x in yaml.__version__.split('.')]
if yaml.version[0] < 5 and yaml.version[1] < 4 and yaml.version[2] < 1:
    print('The yaml2csv.py script requires PyYAML >= 5.4.1!')
    exit(1)

if len(sys.argv) != 3:
    print("Usage:\nyaml2csv.py <yaml file path> <csv file path>")
    exit(1)

yaml_file = os.path.abspath(sys.argv[1])
csv_file  = os.path.abspath(sys.argv[2])

fieldnames = [
    # Overall data
    'target', 'test', 'number_of_tests', 'mutation_score',
    # Overall time
    'total_time', 'time_create_mutant_module', 'time_create_target_ast', 'time_mutate_module', 'time_run_tests_with_mutant',
    # Per mutation
    'mutation_id', 'lineno', 'operator', 'status', 'killer', 'exception_traceback', 'tests_run', 'time'
]

# Attempt to correct the YAML file so that PyYAML can parse it
subprocess.check_output('sed -i "s|\!\!python/module|python/module|g" ' + yaml_file, shell=True)

def write_row_to_csv(output, target, test, number_of_tests, mutation_score,
    total_time, time_create_mutant_module, time_create_target_ast, time_mutate_module, time_run_tests_with_mutant,
    mutation_id, lineno, operator, status, killer, exception_traceback, tests_run, time):

    row = {
        # Overall data
        'target': target, 'test': test, 'number_of_tests': number_of_tests, 'mutation_score': mutation_score,
        # Overall time
        'total_time': total_time, 'time_create_mutant_module': time_create_mutant_module, 'time_create_target_ast': time_create_target_ast, 'time_mutate_module': time_mutate_module, 'time_run_tests_with_mutant': time_run_tests_with_mutant,
        # Per mutation, if any
        'mutation_id': mutation_id, 'lineno': lineno, 'operator': operator, 'status': status, 'killer': killer, 'exception_traceback': exception_traceback, 'tests_run': tests_run, 'time': time
    }

    output.writerow(row)

with open(csv_file, 'w', newline='') as csv_file_output:
    csv_output = csv.DictWriter(csv_file_output, fieldnames=fieldnames)
    csv_output.writeheader()

    with open(yaml_file) as yaml_file_input:
        data = yaml.safe_load(yaml_file_input)

        # Overall data
        assert len(data['targets']) == 1
        target          = data['targets'][0]
        assert len(data['tests']) == 1
        test            = data['tests'][0]['name']
        number_of_tests = data['number_of_tests']
        mutation_score  = data['mutation_score']

        # Overall time data
        total_time = data['total_time']
        time_create_target_ast     = data['time_stats']['create_target_ast']
        time_mutate_module         = data['time_stats']['mutate_module']

        if len(data['mutations']) == 0: # No mutations
            time_create_mutant_module  = 'NA'
            time_run_tests_with_mutant = 'NA'

            # Try to collect mutation operator name from file's path
            operator = yaml_file.split('/')[-2]

            write_row_to_csv(csv_output,
            target, test, number_of_tests, mutation_score,
            total_time, time_create_mutant_module, time_create_target_ast, time_mutate_module, time_run_tests_with_mutant,
            'NA', 'NA', operator, 'NA', 'NA', 'NA', 'NA', 'NA')
        else:
            time_create_mutant_module  = data['time_stats']['create_mutant_module']
            if 'run_tests_with_mutant' in data['time_stats']:
                time_run_tests_with_mutant = data['time_stats']['run_tests_with_mutant']
            else:
                # Incompetent mutants do not have a 'run_tests_with_mutant' field
                # as the mutated code is invalid and therefore not test could ever
                # be executed
                time_run_tests_with_mutant = 'NA'

            # Mutation data
            for mutation in data['mutations']:
                mutation_id = mutation['number']
                assert len(mutation['mutations']) == 1
                lineno              = mutation['mutations'][0]['lineno']
                operator            = mutation['mutations'][0]['operator']
                status              = mutation['status']
                killer              = mutation['killer']
                exception_traceback = mutation['exception_traceback']
                if exception_traceback != None:
                    # Escape \n
                    exception_traceback = exception_traceback.replace("\n", "\\n")
                tests_run           = mutation['tests_run']
                time                = mutation['time']

                write_row_to_csv(csv_output,
                target, test, number_of_tests, mutation_score,
                total_time, time_create_mutant_module, time_create_target_ast, time_mutate_module, time_run_tests_with_mutant,
                mutation_id, lineno, operator, status, killer, exception_traceback, tests_run, time)

# EOF
